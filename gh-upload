#!/usr/bin/env bash
set -eo pipefail
IFS=$'\n\t'

CLI=$(basename "${BASH_SOURCE[0]}")
VERSION=v0.3.0

# Set default values for options
repo=static
owner=$(gh config get -h github.com user)
dry_run=false
message="Updated at: \`$(date +%Y-%m-%d\ %H:%M:%S)\`"
branch=""

usage() {
    cat <<-EOF
Usage: $CLI [repo] <...paths> or $CLI <url>

> Upload folders or files to GitHub repo

Arguments:
    <...paths>           folders or files path

Options:
    -h                   output usage
    -v                   output version
    -d                   dry-run mode, only output the command, # unimplemented
    -m                   commit message. Default is \`Updated at: <datetime>\`
    -r                   repo name. Default is \`static\`
    -b                   branch name. Default is the default branch of the repo
    -x                   verbose output

Examples:
    # Upload README.md file to 'static' repo
    gh upload README.md
    # With commit message 
    gh upload -m "Update for readme" README.md
    # With specify repo
    gh upload -r "tmp" README.md
    gh upload -r "yuler/tmp" README.md
    # With specify branch
    gh upload -r "yuler/tmp" -b "docs" README.md
EOF
    exit
}

version() {
    echo "$CLI $VERSION"
    exit
}

# Parse options
while getopts "hvdxr:b:m:" opt; do
    case ${opt} in
    h)
        usage
        ;;
    v)
        version
        ;;
    d)
        # TODO:
        dry_run=true
        ;;
    m)
        message=$OPTARG
        ;;
    r)
        tmp=$OPTARG
        if [[ $tmp =~ '/' ]]; then
            owner=${tmp%/*}
            repo=${tmp#*/}
        else
            repo=$tmp
        fi
        ;;
    b)
        branch=$OPTARG
        ;;
    x)
        set -x
        ;;
    \?)
        usage
        ;;
    esac
done
shift $((OPTIND - 1))

# Main
if [[ $# -eq 0 ]]; then
    usage
fi

# Create blobs
files=()
blobs=()
for file in "$@"; do
    content=$(base64 -i $file)
    sha=$(gh api /repos/$owner/$repo/git/blobs -f "encoding=base64" -f "content=$content" | jq -r '.sha')
    blobs+=($sha)
    files+=($file)
done

# Branch
if [[ ! $branch ]]; then
    branch=$(gh api repos/$owner/$repo --jq .default_branch)
fi

# Parent sha
parent_sha=$(gh api /repos/$owner/$repo/branches/$branch | jq -r '.commit.sha')
# Create tree
command="gh api -X POST /repos/$owner/$repo/git/trees -f \"base_tree=$parent_sha\""
for ((i = 0; i < $#; i++)); do
    file=${files[$i]}
    sha=${blobs[$i]}
    command+=" -f \"tree[][path]=$file\" -f \"tree[][mode]=100644\" -f \"tree[][type]=blob\" -f \"tree[][sha]=$sha\""
done
command+=" | jq -r '.sha'"
tree_sha=$(eval $command)

# Post commit
commit_sha=$(
    gh api -X POST /repos/$owner/$repo/git/commits -f "tree=${tree_sha}" -f "parents[]=${parent_sha}" \
        -f "message=$message" | jq -r '.sha'
)

# Update ref
sha=$(gh api -X PATCH /repos/$owner/$repo/git/refs/heads/$branch -f "sha=$commit_sha" | jq -r '.object.sha')

# Echo raws URLs
for file in "$files"; do
    echo File: $file
    echo URL: "https://raw.githubusercontent.com/$owner/$repo/$sha/$file"
done

# TODO:
echo "Update $owner/$repo Success"
